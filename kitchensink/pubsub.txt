    // private _channels : Record<string, { handlers: Record<string, PubSubHandler> }> = {};
    // private _pubsubClient : redis.RedisClient | null = null;

    // client.on('pmessage', (pattern, channel, message) => {
    //     this.logger.info('[on-pmessage] (%s) client received message on %s: %s', pattern, channel, message)

    //     let subscriberInfo = this._channels[channel];
    //     if (subscriberInfo)
    //     {
    //         for(let cb of _.values(subscriberInfo.handlers))
    //         {
    //             cb(message, channel, pattern);
    //         }
    //     }
    // })

    // client.on('punsubscribe', (pattern, count) => {
    //     this.logger.info('[on-punsubscribe] from %s, %s total subscriptions', pattern, count);
    // });

    // subscribe(channel: string, cb: (keys: any) => any) : RedisSubscription {
    //     if (!this._channels[channel]) {
    //         this._channels[channel] = {
    //             handlers: {}
    //         }
    //     }
    //     let id = uuidv4();
    //     this._channels[channel].handlers[id] = cb;

    //     if (_.keys(this._channels[channel].handlers).length == 1)
    //     {
    //         this.pubsubClient!.psubscribe(channel, (err, result) => {
    //             if (err)
    //             {
    //                 this._logger.error('[subscribe] ', err);
    //             }
    //         });
    //     }

    //     return {
    //         close: () => {
    //             if (this._channels[channel])
    //             {
    //                 if (this._channels[channel].handlers[id])
    //                 {
    //                     delete this._channels[channel].handlers[id];
    //                     if (_.keys(this._channels[channel].handlers).length == 0)
    //                     {
    //                         delete this._channels[channel];
    //                         this.pubsubClient!.punsubscribe(channel);
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // }

    // publishMessage(channel: string, message: string) {
    //     return Promise.construct((resolve, reject) => {
    //         this.pubsubClient!.publish(channel, message, (err, result) => {
    //             if (err) reject(err)

    //             resolve(result)
    //         })
    //     })
    // }